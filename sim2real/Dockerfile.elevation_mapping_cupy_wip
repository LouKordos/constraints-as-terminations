# TODO: Upgrade to 12.9, only using this old version due to old host NVIDIA driver...
# Go2 onboard jetson also uses old Ubuntu so this is the bottleneck in terms of supported CUDA version. # As soon as 12.9 is supported, switch to ubuntu 24.04 + ROS2 jazzy and simply install gcc-14 insted of building from source
FROM nvidia/cuda:12.2.2-cudnn8-devel-ubuntu22.04
ARG ROS_DISTRO=humble # Adjust based on ubuntu version above
ENV ROS_DISTRO=$ROS_DISTRO
ENV DEBIAN_FRONTEND=noninteractive LANG=en_US.UTF-8 LC_ALL=${LANG} TZ=UTC PYTHONUNBUFFERED=1
RUN printf 'Acquire::ForceIPv4 "true";\n' > /etc/apt/apt.conf.d/99force-ipv4

RUN apt-get update && apt-get install -y locales tzdata curl gnupg2 lsb-release sudo software-properties-common 
RUN locale-gen ${LANG} && update-locale LC_ALL=${LC_ALL} LANG=${LANG} && ln -fs /usr/share/zoneinfo/${TZ} /etc/localtime && dpkg-reconfigure -f ${DEBIAN_FRONTEND} tzdata

# Install ROS2
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt-get update && apt-get install -y python3-argcomplete ros-dev-tools ros-$ROS_DISTRO-desktop ros-$ROS_DISTRO-rmw-cyclonedds-cpp ros-$ROS_DISTRO-rosidl-generator-dds-idl ros-$ROS_DISTRO-realsense2-camera ros-$ROS_DISTRO-pointcloud-to-laserscan ros-$ROS_DISTRO-eigenpy libxine2-dev libtiff5-dev libpostproc-dev libopencv-dev

# Essential stuff
RUN apt-get update -y && apt-get install -y cmake build-essential gdb git curl vim fzf ripgrep libtbb-dev dbus git-lfs libeigen3-dev libboost-python-dev libboost-numpy-dev libpcl-dev python3-dev python3-numpy python3-matplotlib libgoogle-glog-dev tmux sudo iputils-ping unzip wget iproute2 iperf3 libzstd-dev zstd locales curl dbus dbus-x11 x11-apps xauth tree net-tools cyclonedds-tools netcat-openbsd libboost-all-dev libyaml-cpp-dev

# Need to build from source due to arm64 on Go2 Jetson
RUN apt-get update -y && apt-get install -y build-essential cmake git python3 python3-pip python3-venv libopenblas-dev libomp-dev libopenmpi-dev ninja-build libyaml-dev libjpeg-dev libpng-dev
RUN apt-get upgrade -y
WORKDIR /torch
RUN git clone --recursive https://github.com/pytorch/pytorch.git
WORKDIR /torch/pytorch
RUN git checkout e2d141dbde55c2a4370fac5165b0561b6af4798b && git submodule sync && git submodule update --init --recursive
WORKDIR /torch/pytorch/build
RUN \
  if . /etc/os-release && dpkg --compare-versions "$VERSION_ID" ge "24.04"; then \
    echo ">= Ubuntu 24.04: Using apt-get" && \
    apt-get update && apt-get install -y python3-typing-extensions; \
  else \
    echo "< Ubuntu 24.04: Using pip" && \
    python3 -m pip install typing-extensions; \
  fi

RUN CFLAGS="-Wno-error" CXXFLAGS="-Wno-error" cmake -G Ninja \
      -DBUILD_SHARED_LIBS=ON \
      -DCMAKE_BUILD_TYPE=Release \
      -DPYTHON_EXECUTABLE=$(which python3) \
      -DUSE_CUDA=OFF \
      -DUSE_ROCM=OFF \
      -DUSE_CUDNN=OFF \
      -DUSE_NCCL=OFF \
      -DUSE_TENSORPIPE=OFF \
      -DUSE_FBGEMM=OFF \
      -DUSE_XNNPACK=OFF \
      -DUSE_PYTORCH_QNNPACK=OFF \
      -DUSE_NNPACK=OFF \
      -DUSE_DISTRIBUTED=OFF \
      -DUSE_KINETO=OFF \
      -DBUILD_TEST=OFF \
      -DUSE_OPENCL=OFF \
      -DUSE_SYSTEM_ONNX=OFF \
      -DUSE_NNAPI=OFF \
      -DBUILD_PYTHON=OFF \
      -DCMAKE_C_FLAGS="-Wno-error" \
      -DCMAKE_CXX_FLAGS="-Wno-error" \
      -DCMAKE_CUDA_FLAGS="-Wno-error" \
      -DCMAKE_INSTALL_PREFIX=/torch/libtorch \
      ..
RUN CFLAGS="-Wno-error" CXXFLAGS="-Wno-error" cmake --build . --target install

# This is only needed because we are forced to use Ubuntu 22.04 becausb the host only supports up to CUDA 12.2.
# As soons as it't possible to switch to Ubuntu 24.04, remove this and just install it via the package
# but keep the ENV calls to update the default compiler
ARG TARGETARCH
WORKDIR /gcc-14
RUN apt-get update && apt-get install -y build-essential libmpfr-dev libgmp3-dev libmpc-dev wget
RUN wget http://ftp.gnu.org/gnu/gcc/gcc-14.2.0/gcc-14.2.0.tar.gz && tar -xf gcc-14.2.0.tar.gz
WORKDIR /gcc-14/gcc-14.2.0
RUN set -eux; \
    case "${TARGETARCH}" in \
          amd64) TRIPLET=x86_64-linux-gnu ;; \
                arm64) TRIPLET=aarch64-linux-gnu ;; \
                      *) echo "Unsupported architecture: ${TARGETARCH}" >&2; exit 1 ;; \
                          esac; \
                              ./configure \
                                    --build=${TRIPLET} \
                                          --host=${TRIPLET} \
                                                --target=${TRIPLET} \
                                                      --prefix=/usr/local/gcc-14.2.0 \
                                                            --enable-checking=release \
                                                                  --enable-languages=c,c++ \
                                                                        --disable-multilib \
                                                                              --program-suffix=-14

RUN make -j"$(nproc)" && make install

# Set this AFTER libtorch due to compiler bug in gcc14!
ENV GCC_HOME=/usr/local/gcc-14.2.0
ENV PATH=$GCC_HOME/bin:$PATH
ENV LD_LIBRARY_PATH=$GCC_HOME/lib64:$LD_LIBRARY_PATH
ENV CC=$GCC_HOME/bin/gcc-14
ENV CXX=$GCC_HOME/bin/g++-14

WORKDIR /go2_sdk
RUN git clone https://github.com/unitreerobotics/unitree_sdk2.git
WORKDIR /go2_sdk/unitree_sdk2/build
RUN git checkout 66cc92816dd4af720e35b75f7dbd5be35381b68b
RUN cmake ..
RUN make -j
RUN make install

WORKDIR /libzmq
RUN git clone https://github.com/zeromq/libzmq.git
WORKDIR /libzmq/libzmq
RUN git checkout 622fc6dde99ee172ebaa9c8628d85a7a1995a21d
WORKDIR /libzmq/libzmq/build
RUN cmake ..
RUN make -j install

WORKDIR /cppzmq
RUN git clone https://github.com/zeromq/cppzmq.git
WORKDIR /cppzmq/cppzmq/build
RUN git checkout 3bcbd9dad2f57180aacd4b4aea292a74f0de7ef4
RUN cmake -DCPPZMQ_BUILD_TESTS=OFF ..
RUN make -j install

WORKDIR /livox-sdk
RUN git clone https://github.com/Livox-SDK/Livox-SDK2.git
WORKDIR /livox-sdk/Livox-SDK2/build
# Patches needed for C++23 build
RUN sed -i '/^#include /a #include <cstdint>' ../sdk_core/logger_handler/file_manager.h
RUN sed -i '/^#include /a #include <cstdint>' ../sdk_core/comm/define.h
RUN cmake .. && make -j
RUN make install

# go2_odometry
WORKDIR /inekf
RUN git clone https://github.com/inria-paris-robotics-lab/invariant-ekf.git
WORKDIR /inekf/invariant-ekf/build
RUN git checkout 6047ef98b8984ad041ce10849b351df17de4dfe8
# Patch minimum required CMakeLists.txt
RUN sed -E -i.bak 's#^(cmake_minimum_required\(\s*VERSION\s*)[0-9]+(\.[0-9]+)*#\1 3.22#' ../CMakeLists.txt
# ROS path needed for ros-$ROS_DISTRO-eigenpy
RUN CMAKE_PREFIX_PATH=/opt/ros/$ROS_DISTRO/:$CMAKE_PREFIX_PATH cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON_INTERFACE=ON -DPYTHON_DEB_LAYOUT=ON ..
RUN make -j && make install

# Solver for LI-INIT
WORKDIR /ceres
RUN wget https://github.com/ceres-solver/ceres-solver/archive/refs/tags/2.0.0.tar.gz
RUN tar -zxf 2.0.0.tar.gz
WORKDIR /ceres/ceres-solver-2.0.0/build
# Jobs are memory hungry!
RUN cmake -DCMAKE_BUILD_TYPE=Release .. && make -j8
RUN make install

# Everything below is for elevation_mapping_cupy
RUN python3 -m pip install --extra-index-url https://download.pytorch.org/whl/cu121 torch torchvision torchaudio
RUN python3 -m pip install \
    # colcon extension to enable easier workspace cleaning
    colcon-clean\
    # Almost all ros2 packages
    rosdoc2\
    # sphinx is used across packages for documentation
    sphinx_rtd_theme \
    sphinx-multiversion \
    sphinx-copybutton\
    sphinx-tabs\
    # For VS Code python code formatting I think?
    autopep8\
    # Used by multiple packages for linting I think?
    flake8-builtins\
    flake8-comprehensions\
    flake8-docstrings\
    flake8-import-order\
    flake8-class-newline\
    flake8-blind-except\
    flake8-quotes \
    cupy-cuda12x simple-parsing transforms3d scipy

RUN apt-get update && apt-get install -y python3-sklearn python3-shapely python3-opencv

# Install NVIDIA Container Toolkit
RUN distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
    && curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \
    && curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list \
    && apt update && apt install -y nvidia-container-toolkit

RUN apt-get update && apt-get install -y \
    ros-${ROS_DISTRO}-grid-map-msgs\
    # rosdep grid_map_ros
    ros-${ROS_DISTRO}-grid-map-ros\
    # rosdep image_transport
    ros-${ROS_DISTRO}-image-transport\
    # rosdep pcl_ros
    ros-${ROS_DISTRO}-pcl-ros\
    # rosdep cv_bridge
    ros-${ROS_DISTRO}-cv-bridge\
    # rosdep tf-transformations
    ros-${ROS_DISTRO}-tf-transformations\
    # rosdep rviz2
    ros-${ROS_DISTRO}-grid-map-cv\
    # rosdep grid_map_core
    ros-${ROS_DISTRO}-grid-map-core\
    # rosdep grid_map_demos
    ros-${ROS_DISTRO}-grid-map-demos\
    ros-${ROS_DISTRO}-point-cloud-transport\
    python3-shapely\
    python3-scipy\
    python3-ruamel.yaml

# RUN AFTER ALL DEPENDENCY INSTALLATIONS!
RUN ldconfig
ENV DOCKER_FLAG_FOR_RUN_SCRIPT=1

RUN rosdep init
RUN rosdep update
RUN echo '' >> /root/.bashrc
RUN echo 'eval "$(fzf --bash)"' >> /root/.bashrc
# RUN echo 'source /opt/ros/$ROS_DISTRO/setup.bash' >> ~/.bashrc
RUN echo '# Remind user to source custom ROS2 workspace' >> /root/.bashrc
RUN echo 'echo "Remember to source /app/ros2_ws/install/setup.bash OR /app/odom_alternative_ws/install/setup.bash if you are working with ROS!"' >> /root/.bashrc
RUN echo 'echo "Also remember to export ROS_DOMAIN_ID=0 if you want to communicate with the Go2."' >> /root/.bashrc
ENV ROS_DOMAIN_ID=69
ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

COPY . /app
COPY .vimrc /root/.vimrc
WORKDIR /app

# Using CMD instead of ENTRYPOINT here so that docker-compose.yml for vs code can override it.
CMD sleep infinity
